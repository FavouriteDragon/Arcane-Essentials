import groovy.json.JsonOutput

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven { name 'MinecraftForge'; url 'https://maven.minecraftforge.net/' }
        maven { name 'Garden of Fancy'; url 'https://maven.gofancy.wtf/releases' }
        maven { name 'Sponge'; url 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url 'https://plugins.gradle.org/m2/' } // For Shadow plugin
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
//        classpath group: 'wtf.gofancy.fancygradle', name: 'wtf.gofancy.fancygradle.gradle.plugin', version: '1.1.+'
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.3"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "org.sonarqube"

//apply plugin: 'wtf.gofancy.fancygradle'


ext.config = parseConfig(file("build.properties"))
ext.dependenciesConfig = parseConfig(file("dependencies.properties"))
ext.secrets = parseConfig(file("secrets.properties"))


version = "1.0.2"
group = "com.favouritedragon.arcane_essentials"
archivesBaseName = "ArcaneEssentials"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'


// This makes IDEA recognize the assets folder
idea {
    module {
        inheritOutputDirs = true
    }
}

repositories {
    google()
    mavenCentral()
    jcenter()
    maven {
        name = "Curse Maven"
        url = "https://cursemaven.com"
    }
    maven {
        name = "Gradle Plugins"
        url = "https://plugins.gradle.org/m2/"
    }

    maven {
        name = "MinecraftForge Maven"
        url = "https://maven.minecraftforge.net"
    }
}

configurations {
    shadow

    compile.extendsFrom provided
    provided.extendsFrom shadow
}

task useDeobfDependencies {
    dependenciesConfig.obfuscated = false
}

//tasks.runClient.dependsOn tasks.useDeobfDependencies
//tasks.runServer.dependsOn tasks.useDeobfDependencies

dependencies {
    provided fileTree(dir: dependenciesConfig.libraries + (dependenciesConfig.obfuscated ? "" : "Deobf"), include: ["*.jar"])
//    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"

    // Use implementation to ensure it gets shaded into the jar
    shadow "org.joml:joml:1.10.1"

    // External dependency provided by the player, not included in the build
    compileOnly files('libs/ElectroblobsWizardry-4.3.9.jar') // Replace with the correct path
}


minecraft {
    version = config.forge_version
    mappings = config.mappings
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.favouritedragon.arcaneessentials.Main', // Adjust the main class if needed
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
    from("./") {
        include "*.md"
    }
}

shadowJar {
    // Overwrite the default file
    classifier = null
    configurations = [project.configurations.shadow]

    from(sourceSets.main.allJava) {
        include "*"
    }
    from("./") {
        include "*.md"
    }

    relocate "org.joml", "com.favouritedraogn.arcane_essentials.joml"
}

reobf {
    shadowJar {
        mappingType = "SEARGE"
    }
}
tasks.reobfShadowJar.mustRunAfter shadowJar


processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'pack.mcmeta'
        include 'mcmod.info'
    }
    duplicatesStrategy = 'include'
}


static def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}
//fancyGradle {
//    patches {
//        resources
//        coremods
//        asm
//    }
//}